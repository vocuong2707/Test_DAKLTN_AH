"use client"

import React, { FC, useState, useEffect, use } from 'react';
import { apiSlice, useLoadUserQuery } from "@/redux/features/api/apiSilce"; // API l·∫•y th√¥ng tin user
import Heading from './Utils/Heading';
import Header from "./components/Header";
import Hero from './Route/Hero';
import Courses from "./components/Route/Courses";
import Revies from "./components/Route/Revies";
import FQA from "./components/FQA/FQA";
import Footer from "./components/Footer";
import TestModal from "./components/TestModal"; // Import TestModal
import { useSelector } from 'react-redux';
import ChatBox from './components/Chatbox/ChatBox'; // Import ChatBox

interface Props {}

const Page: FC<Props> = (props) => {
 // L·∫•y count t·ª´ Redux



  const [open, setOpen] = useState(false);
  const [activeItem, setActiveItem] = useState(0);

  const [openTestModal, setOpenTestModal] = useState(false); // Qu·∫£n l√Ω tr·∫°ng th√°i TestModal
  const [count, setCount] = useState(useSelector((state: any) => state.auth.count)); // ƒê·∫øm s·ªë l·∫ßn n·ªôp b√†i ki·ªÉm tra
  const [route, setRoute] = useState("Login");
  const [isChatBoxOpen, setChatBoxOpen] = useState(false); // Tr·∫°ng th√°i cho ChatBox
  
  const { data: userData, isLoading, refetch } = useLoadUserQuery(undefined, {
    refetchOnMountOrArgChange: true,
    skip:false,
  });
  const userRedux = useSelector((state: any) => state.auth.user);

  // Ki·ªÉm tra ƒëi·ªÅu ki·ªán ƒë·ªÉ hi·ªÉn th·ªã modal
  useEffect(() => {
    
    
    if (userData && userData.user) { // Ki·ªÉm tra userData.user t·ªìn t·∫°i
      if (userData.user.role === "user" && userData.user.isTest === false && count === 0) {
        setOpenTestModal(true);
        userData.count === 1;
        apiSlice.util.invalidateTags([{ type: "User", id: "loadUser(undefined)" }]);
        refetch(); // T·∫£i l·∫°i d·ªØ li·ªáu t·ª´ server
        
      }
    }
  }, [userData, count]);
  
  return (
    <div>
      <Heading
        title="H·ªçc Tr·ª±c Tuy·∫øn"
        description="n·ªÅn t·∫£ng ƒë·ªÉ h·ªçc sinh h·ªçc t·∫≠p v√† nh·∫≠n s·ª± tr·ª£ gi√∫p t·ª´ gi√°o vi√™n"
        keyword="L·∫≠p tr√¨nh, MERN, Redux, H·ªçc m√°y"
      />

      <Header open={open} setOpen={setOpen} activeItem={activeItem} setRoute={setRoute} route={route} />
      <Hero />
      <Courses user={userData?.user}/>
      <br />
      <br />
      <Revies />
      <FQA />
      <Footer />

      {/* Th√¥ng b√°o ChatBox */}
      {!isChatBoxOpen && ( // Ch·ªâ hi·ªÉn th·ªã n√∫t üí¨ khi ChatBox ch∆∞a m·ªü
        <div style={{
          position: "fixed",
          bottom: "80px", // C√°ch n√∫t chat m·ªôt ch√∫t ƒë·ªÉ tr√°nh ch·ªìng l√™n
          right: "20px",
          zIndex: 1000,
          fontSize: "16px",
          color: "#333",
        }}>
          <p className='font-Poppins text-black dark:text-white font-[16px]'>H√£y chat v·ªõi ch√∫ng t√¥i n·∫øu b·∫°n th·∫Øc m·∫Øc!</p>
        </div>
      )}

      {/* N√∫t ChatBox üí¨ */}
      {!isChatBoxOpen && ( // Ch·ªâ hi·ªÉn th·ªã n√∫t üí¨ khi ChatBox ch∆∞a m·ªü
        <button
          onClick={() => setChatBoxOpen(true)} // Khi nh·∫•n v√†o, m·ªü ChatBox v√† ·∫©n üí¨
          style={{
            position: "fixed",
            bottom: "20px",
            right: "20px",
            padding: "10px 20px",
            backgroundColor: "#007bff",
            color: "#fff",
            borderRadius: "50%",
            border: "none",
            cursor: "pointer",
            fontSize: "20px",
            zIndex: 1000,
          }}
        >
          üí¨
        </button>
      )}

      {/* Hi·ªÉn th·ªã ChatBox khi isChatBoxOpen l√† true */}
      {isChatBoxOpen && (
        <div className="chatBoxContainer">
          {/* Truy·ªÅn d·ªØ li·ªáu userData v√†o ChatBox */}
          <ChatBox onClose={() => setChatBoxOpen(false)} userData={userData} />
        </div>
      )}


      {/* TestModal */}
      {openTestModal && (
        <TestModal
          open={openTestModal}
          setOpen={setOpenTestModal}
          onTestCompleted={() => setCount(1)} // ƒê√°nh d·∫•u ƒë√£ ho√†n th√†nh b√†i ki·ªÉm tra
          count={count}
          setCount={setCount}
          refetch={refetch}
          user={userData}
        />
      )}
    </div>
  );
};

export default Page;
